import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const body = await req.json();
    const { input, retrieve_existing } = body;
    
    console.log('üì• Received payload:', JSON.stringify({ input, retrieve_existing }, null, 2));
    
    if (!input?.nombre_empresa) {
      console.error('‚ùå Missing nombre_empresa');
      return new Response(JSON.stringify({ 
        error: 'Campo requerido: nombre_empresa' 
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (!input?.audiencias || !Array.isArray(input.audiencias) || input.audiencias.length === 0) {
      console.error('‚ùå Missing or invalid audiencias');
      return new Response(JSON.stringify({ 
        error: 'Debes definir al menos una audiencia objetivo' 
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Auth
    const authHeader = req.headers.get('Authorization');
    if (!authHeader?.startsWith('Bearer ')) {
      return new Response(JSON.stringify({ error: 'Token requerido' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    const token = authHeader.replace('Bearer ', '');
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);

    if (userError || !user) {
      return new Response(JSON.stringify({ error: 'Autenticaci√≥n requerida' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Get user's primary company
    const { data: companyMember } = await supabase
      .from('company_members')
      .select('company_id')
      .eq('user_id', user.id)
      .eq('is_primary', true)
      .single();

    if (!companyMember) {
      console.warn('No primary company found for user. Proceeding without DB persistence.');
    }

    const companyId = companyMember?.company_id || null;

    // Check for existing strategy (early return)
    if (retrieve_existing === true && companyId) {
      const { data: existing } = await supabase
        .from('marketing_strategies')
        .select('*')
        .eq('company_id', companyId)
        .order('created_at', { ascending: false })
        .limit(1)
        .maybeSingle();

      if (existing?.full_strategy_data) {
        console.log('‚úÖ Returning cached strategy');
        return new Response(JSON.stringify({
          strategy: existing.full_strategy_data,
          strategy_id: existing.id,
          cached: true
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }
    }

    // Build minimal payload for N8N
    const payload = {
      nombre_empresa: input.nombre_empresa,
      objetivo_de_negocio: input.objetivo_de_negocio || '',
      propuesta_valor: input.propuesta_valor || '',
      sitio_web: input.sitio_web || '',
      nombre_campana: input.nombre_campana || 'Nueva Campa√±a',
      objetivo_campana: input.objetivo_campana || 'General',
      descripcion_campana: input.descripcion_campana || '',
      audiencias: input.audiencias || []
    };

    console.log('üì§ Sending to N8N:', JSON.stringify(payload, null, 2));

    console.log('üîÑ Calling N8N webhook...');
    
    // Call N8N webhook
    const n8nUrl = 'https://buildera.app.n8n.cloud/webhook/marketing-strategy';
    const n8nUser = Deno.env.get('N8N_AUTH_USER');
    const n8nPass = Deno.env.get('N8N_AUTH_PASS');

    const n8nResponse = await fetch(n8nUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...(n8nUser && n8nPass ? {
          'Authorization': `Basic ${btoa(`${n8nUser}:${n8nPass}`)}`
        } : {})
      },
      body: JSON.stringify(payload),
      signal: AbortSignal.timeout(300000) // 5 minutes
    });

    if (!n8nResponse.ok) {
      const errorText = await n8nResponse.text();
      console.error('‚ùå N8N error:', errorText);
      throw new Error(`N8N returned ${n8nResponse.status}`);
    }

    const strategyData = await n8nResponse.json();
    
    try {
      console.log('‚úÖ Strategy generated by N8N');
      console.log('üìä N8N Response structure:', {
        topLevelKeys: Object.keys(strategyData || {}),
        hasCoreMessage: !!(strategyData?.mensaje_diferenciador || strategyData?.core_message),
        hasCompetitors: !!(strategyData?.competidores || strategyData?.competitors),
        hasAiInsights: !!(strategyData?.ai_insights || strategyData?.insights),
        aiInsightsType: strategyData?.ai_insights ? typeof strategyData.ai_insights : 'N/A',
        aiInsightsPreview: strategyData?.ai_insights 
          ? (Array.isArray(strategyData.ai_insights) 
            ? `Array[${strategyData.ai_insights.length}]` 
            : (typeof strategyData.ai_insights === 'object' && strategyData.ai_insights !== null
              ? Object.keys(strategyData.ai_insights) 
              : String(strategyData.ai_insights)))
          : 'N/A'
      });
      
      // Log critical fields
      console.log('üîë Critical fields check:', {
        core_message: strategyData?.mensaje_diferenciador || strategyData?.core_message || 'MISSING',
        competitors_count: (strategyData?.competidores || strategyData?.competitors || []).length,
        ai_insights_present: !!(strategyData?.ai_insights || strategyData?.insights)
      });
    } catch (logError) {
      console.warn('‚ö†Ô∏è Error logging strategy data:', logError);
    }

    // Store strategy (simple) - only if we have a companyId
    let strategyId: string | null = null;

    if (companyId) {
      const { data: existingStrategy } = await supabase
        .from('marketing_strategies')
        .select('id')
        .eq('company_id', companyId)
        .maybeSingle();

      const strategyPayload = {
        company_id: companyId,
        core_message: strategyData.mensaje_diferenciador || strategyData.core_message || '',
        full_strategy_data: strategyData,
        message_variants: strategyData.variantes_mensaje || strategyData.differentiated_message || {},
        updated_at: new Date().toISOString()
      };

      if (existingStrategy) {
        const { data: updated, error: updateError } = await supabase
          .from('marketing_strategies')
          .update(strategyPayload)
          .eq('id', existingStrategy.id)
          .select()
          .single();
        
        if (updateError || !updated) {
          console.error('Error updating strategy:', updateError);
          throw new Error('Error al actualizar estrategia');
        }
        strategyId = updated.id;
      } else {
        const { data: created, error: insertError } = await supabase
          .from('marketing_strategies')
          .insert(strategyPayload)
          .select()
          .single();
        
        if (insertError || !created) {
          console.error('Error creating strategy:', insertError);
          throw new Error('Error al crear estrategia');
        }
        strategyId = created.id;
      }

      console.log('‚úÖ Strategy saved:', strategyId);
    } else {
      console.log('‚ÑπÔ∏è Skipping DB persistence because no companyId was found.');
    }

    // Return response
    const response = {
      strategy: strategyData,
      strategy_id: strategyId,
      cached: false
    };
    console.log('üì§ Returning response with keys:', Object.keys(response));
    
    return new Response(JSON.stringify(response), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('Error:', error);
    return new Response(JSON.stringify({ 
      error: error.message || 'Error generando estrategia'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});
